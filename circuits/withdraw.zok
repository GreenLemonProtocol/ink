import "hashes/mimcSponge/mimcSponge" as hash;

const u32 DEPTH = 10;

// directionSelector => true if current digest is on the rhs of the hash

def merkleTreeChecker(field root, private field leaf, private bool[DEPTH] directionSelector, private field[DEPTH] path) -> bool {
    // Start from the leaf
    field mut digest = leaf;

    // Loop up the tree
    for u32 i in 0..DEPTH {
        field[2] preimage = directionSelector[i]? [path[i], digest] : [digest, path[i]];
        digest = hash::<_, 1>(preimage, 0)[0];
    }
    return digest == root;
}

// field only hold 254 bits, nullifier and secret can generate 248 bits
def main(field root, field nullifierHash, field[2] recipient, field[2] relayer, field fee, field refund, private field nullifier, private field secret, private field[DEPTH] pathElement, private bool[DEPTH] pathIndices) {
  //u32[8] preimage = unpack256u(nullifier);
  field digest = hash::<_, 1>([nullifier], 0)[0];
  assert(digest == nullifierHash);
  field leaf =  hash::<_, 1>([nullifier, secret], 0)[0];
  assert(merkleTreeChecker(root, leaf, pathIndices, pathElement));

  field[2] recipientDuplicate = recipient;
  field[2] relayerDuplicate = relayer;
  field feeDuplicate = fee;
  field refundDuplicate = refund;

  return;
}